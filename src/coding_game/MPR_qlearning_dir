
import math
import numpy as np
import sys 

#lien d'une partie https://www.codingame.com/replay/840369181


#fichier Ã  copier coller dans codingame 


policy ={0: 11, 1: 1, 2: 1, 3: 5, 4: 0, 5: 0, 6: 0, 7: 4, 8: 0, 9: 2, 10: 4, 11: 3, 12: 0, 13: 0, 14: 0, 15: 0, 16: 9, 17: 1, 18: 10, 19: 1, 20: 10, 21: 0, 22: 1, 23: 0, 24: 5, 25: 0, 26: 0, 27: 5, 28: 10, 29: 0, 30: 0, 31: 0, 32: 5, 33: 5, 34: 0, 35: 0, 36: 10, 37: 10, 38: 0, 39: 0, 40: 13, 41: 0, 42: 0, 43: 1, 44: 0, 45: 0, 46: 0, 47: 1, 48: 5, 49: 10, 50: 10, 51: 0, 52: 12, 53: 10, 54: 5, 55: 4, 56: 10, 57: 6, 58: 10, 59: 10, 60: 0, 61: 3, 62: 14, 63: 5, 64: 10, 65: 5, 66: 10, 67: 5, 68: 5, 69: 10, 70: 5, 71: 0, 72: 12, 73: 9, 74: 8, 75: 12, 76: 5, 77: 1, 78: 8, 79: 11, 80: 10, 81: 10, 82: 12, 83: 3, 84: 14, 85: 13, 86: 14, 87: 9, 88: 11, 89: 6, 90: 0, 91: 10, 92: 12, 93: 4, 94: 4, 95: 9, 96: 14, 97: 13, 98: 4, 99: 1, 100: 1, 101: 10, 102: 14, 103: 13, 104: 10, 105: 7, 106: 14, 107: 4, 108: 13, 109: 14, 110: 4, 111: 9, 112: 10, 113: 7, 114: 2, 115: 1, 116: 14, 117: 7, 118: 7, 119: 4, 120: 9, 121: 3, 122: 1, 123: 6, 124: 14, 125: 9, 126: 4, 127: 4, 128: 9, 129: 14, 130: 9, 131: 4, 132: 13, 133: 14, 134: 14, 135: 2, 136: 13, 137: 8, 138: 9, 139: 14, 140: 14, 141: 3, 142: 2, 143: 4, 144: 14, 145: 4, 146: 4, 147: 3, 148: 9, 149: 4, 150: 4, 151: 4, 152: 4, 153: 4, 154: 2, 155: 9, 156: 9, 157: 3, 158: 4, 159: 4, 160: 5, 161: 1, 162: 4, 163: 8, 164: 4, 165: 2, 166: 1, 167: 3, 168: 1, 169: 1, 170: 1, 171: 3, 172: 4, 173: 1, 174: 1, 175: 1, 176: 3, 177: 4, 178: 4, 179: 4}
discretisation=[9,5,4] 
nb_action=15
max_dist = np.sqrt(16000**2+9000**2)
past_pos = (0,0)
current_pos = (0,0)

def discretized_angle(angle):
    bins = [-135, -90,-45,-15,15,45,90,135]
    res = np.digitize(angle, bins)
    return res


def discretized_distance(dist):
    bins =  [1000, 5000,10000, 15000]
    return np.digitize(dist, bins)

def discretized_speed( x, y, past_pos):
    vitesse = np.sqrt((x - past_pos[0])**2 + (y - past_pos[1])**2)
    bins = [200,300, 500]
    return np.digitize(vitesse, bins)




def discretized_state( angle, dist, x, y,past_pos):
    state = (discretized_angle(angle), discretized_distance(dist), discretized_speed(x,y, past_pos))
    index = state[0]*(discretisation[1] * discretisation[2]) + state[1]*discretisation[2] + state[2]
    return index

def convert_action( action, x,y,past_pos):
    mapping_thrust = {0: 0, 1: 50, 2: 100}
    thrust = mapping_thrust[action // 5]
    # mapping_angle = {0: -18, 1: -9, 2: 0, 3: 9, 4: 18}
    mapping_angle = {0: -18,1:-9, 2: 0, 3:9, 4: 18}
    x_past, y_past = past_pos

    angle_action = mapping_angle[action % 5]

    angle = math.degrees(math.atan2(y-y_past, x-x_past))
    # angle = board.pod.angle
    
    new_angle = (angle + angle_action +540)%360 -180
    new_x = x + math.cos(math.radians(new_angle)) *1000
    new_y = y + math.sin(math.radians(new_angle)) *1000
    return int(new_x), int(new_y), thrust


boost = True
while True:

    x, y, next_checkpoint_x, next_checkpoint_y, next_checkpoint_dist, next_checkpoint_angle = [int(i) for i in input().split()]
    opponent_x, opponent_y = [int(i) for i in input().split()]
    current_pos = (x,y)
    state = discretized_state(next_checkpoint_angle, next_checkpoint_dist,x,y, past_pos )
    #print(next_checkpoint_dist, file=sys.stderr, flush=True)
    action = policy[state]
    targetx, targety, thrust = convert_action(action,x,y,past_pos)


    past_pos= current_pos

    print(str(targetx) + " " + str(targety) + " " + str(thrust))


