import sys
import math
import numpy as np
#qtable obtenue apres train de 10000 episodes avec les parametres alpha = .7, epsilon = .3, gamma = 0.95
qtable = [
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [-2.60562658, -2.62052007, -2.65638376, -2.54599243, -2.53978408,
       -2.62509027, -2.29811284, -2.58732316, -2.56737033],
    [-2.41621404, -2.39941741, -2.40752234, -2.37656725, -2.38507373,
       -2.39378408, -2.3843531 , -2.11722046, -2.42962967],
    [-2.28514038, -2.212161  , -2.2120944 , -2.22420015, -2.19816295,
       -2.26893535, -2.22996814, -2.19662879, -2.02853822],
    [-2.34160918, -2.35127884, -2.40453099,  3.51641505, -2.29556063,
       -2.34969801, -2.29036371, -2.29598658, -2.30500161],
    [-2.44478031, -2.42124267, -2.41817985, -2.42036572, -2.41420678,
       -2.44350644, -1.87801541, -2.44752221, -2.43335876],
    [-2.27305037, -2.25599239, -2.28402702, -2.25681733, -2.26433481,
       -2.26936633, -2.03054433, -2.23351424, -2.23148123],
    [-2.41912734, -2.37919906, -2.42115079, -2.33354803, -2.33978853,
       -2.31855909, -2.26399017, -2.32015407, -2.32080077],
    [-2.49888111, -2.49303128, -2.53792153, -2.52022282, -2.50704289,
       -2.52522432, -2.14996378, -2.49818552, -2.52077496],
    [-2.31936631, -2.29524658, -2.36143708, -2.31403537, -2.27712864,
       -2.32514204, -2.01910549, -2.28257389, -2.30507852],
    [-2.40451441, -2.39602096, -2.48390217, -2.39068347, -2.43874814,
       -2.41319215, -2.22113051, -2.39260422, -2.3877392 ],
    [-2.55736544, -2.55953593, -2.58966104, -2.58788829, -2.58648376,
       -2.58790564, -2.1682035 , -2.56657195, -2.5936779 ],
    [-2.3312486 , -2.32235266, -2.31468239, -2.31098104, -2.31734755,
       -2.34294664, -2.32439525, -2.34387065, -2.06310061],
    [-2.461476  , -2.49069839, -2.51819996, -2.52138899, -2.55627345,
       -2.57896867, -2.45979394, -2.24256803, -2.49943762],
    [-2.44435016, -2.44865552, -2.43140322, -2.44591214, -2.43805933,
       -2.45857042, -1.94001107, -2.43861417, -2.46180662],
    [-2.20706424, -2.20411677, -2.20380031, -2.17729442, -2.25361933,
       -2.28644755, -2.17614081, -2.03902829, -2.17885279],
    [-2.47437032, -2.46630408, -2.35538442, -2.378535  , -2.4152121 ,
       -2.37106744, -2.40154643, -2.3731642 , -1.35217613],
    [-2.50401076, -2.54870525, -2.50372966, -2.51886565, -2.50461709,
       -2.53776131, -2.50442703, -1.66460613, -2.52017659],
    [-2.2882903 , -2.24711162, -2.255797  , -2.25326917, -2.28301071,
       -2.24084077, -2.25987808, -2.03171374, -2.2739816 ],
    [-2.48390217, -2.39347327, -2.46213197, -2.36785114, -2.38350793,
       -2.38099788, -2.3912961 , -2.1445916 , -2.38011666],
    [-2.56141539, -2.5649631 , -2.56858207, -2.57241206, -2.58331725,
       -2.5877541 , -2.09115742, -2.55803139, -2.57273413],
    [-2.3243764 , -2.32443665, -2.30362004, -2.29170068, -2.3363266 ,
       -2.29614054, -2.01920161, -2.26439263, -2.29267326],
    [-2.44235829, -2.39730321, -2.3563753 , -2.45442747, -2.43125623,
       -2.46355726, -2.37345936, -2.25193519, -2.36853872],
    [-2.58426239, -2.62804215, -2.59976241, -2.62764598, -2.59122944,
       -2.61649678, -2.58828922, -2.61392626, -2.11099347],
    [-2.4060668 , -2.32901589, -2.3570217 , -2.4491169 , -2.31236588,
       -2.31873739, -2.37692639, -2.31876675, -2.1858927 ],
    [-2.1688827 , -2.36708859, -2.26709948, -2.18672311, -2.19162264,
       -2.17479918, -2.17596627, -2.01113655, -2.18184437],
    [-2.34037902, -2.38035815, -2.33779085, -2.33543905, -2.36210987,
       -2.37064639, -2.3644434 , -2.36826039, -1.9961438 ],
    [-2.19052647, -2.18934513, -2.22202862, -2.1935013 , -2.0424877 ,
       -2.17861104, -2.22783716, -2.20391794, -2.2160188 ],
    [-2.16228715, -2.22422311, -2.22422311, -2.18350262, -2.23637404,
       -2.1886195 , -2.21995001, -2.26350281, -1.58085323],
    [-2.39097359, -2.34463701, -2.3744151 , -2.3516576 , -2.35443251,
       -2.36022749, -2.38024435, -2.36037414, -1.86847582],
    [-2.21993547, -2.27405783, -2.22603968, -2.1877369 , -2.17794851,
       -2.17668151, -2.17367691, -2.03709468, -2.20628295],
    [-2.39602096, -2.32982085, -2.31784139, -2.37097287, -2.292052  ,
       -2.38161115, -2.39946537, -2.18083346, -2.32851425],
    [-2.51168818, -2.46537905, -2.50257377, -2.49701396, -2.48448516,
       -2.4908972 , -2.51202448, -2.49460265, -2.07383367],
    [-2.27108508, -2.31758174, -2.35282993, -2.28535974, -2.26707795,
       -2.30071659, -2.01869463, -2.30320516, -2.31418298],
    [-2.42276845, -2.41550273, -2.4369407 , -2.37609932, -2.38453538,
       -2.37051418, -2.41542609, -2.4443939 , -2.13868133],
    [-2.5822723 , -2.60518722, -2.56577623, -2.56426545, -2.56118092,
       -2.58947743, -2.60752515, -2.06854436, -2.58312836],
    [-2.29187799, -2.28152163, -2.29516856, -2.29111124, -2.33106743,
       -2.34328753, -2.02065653, -2.35086581, -2.27875599],
]


discretisation=[5,4,3]
nb_action=3
max_dist = np.sqrt(16000**2+9000**2)
past_pos = (0,0)


def discretized_angle( angle):
        #discretisation de l'angle discretisation corresponds à en combien d'etats on discretise un angle qui 
        #corresponds à devant le pod. si l'angle indique l'arrière du pod il est discretisé en deux états
        if 0<= angle<= 180:
            for i in range(discretisation[0]):
                if angle <=  (i+1)* (180/discretisation[0]):
                    res = i
        elif angle < 270:
            res = discretisation[0]
        else:
            res = discretisation[0] +1

        assert res < discretisation[0]+2
        return res
        
def discretized_distance( dist):
    if dist> max_dist:
        dist= max_dist
    if dist< 1000:
        res = 0
    elif dist<2000:
        res = 1
    elif dist<8000:
        res = 2
    else:
        res = 3
    assert res < discretisation[1]
    return res

def discretized_speed( x,y):

    vitesse = np.sqrt(abs(x - past_pos[0])**2 + abs(y - past_pos[1])**2)
    if vitesse<100:
        return 0
    elif vitesse<300:
        return 1
    else:
        return 2


def discretized_state( angle, dist, x, y):
    state = (discretized_angle(angle), discretized_distance(dist), discretized_speed(x,y))
    past_pos = (x,y)
    index = state[0]*(discretisation[1] * discretisation[2]) + state[1]*discretisation[2] + state[2]


    return index


#fonction legerement modifie par rapport a celle dans qagent car on faisait appel à board.pod.getCoord()
def convert_action( action,x,y ,x_target, y_target):
    # mapping = {0:0,1:30,2:50,3:80,4:100}
    thrust = action //3
    angle_action = action % 3
    mapping_thrust = {0:0,1:50,2:100}
    current_x = x
    current_y = y
    angle = math.degrees(math.atan2(y_target - current_y, x_target - current_x))
    if angle_action == 0:  
        new_angle = angle - 18
    elif angle_action == 1: 
        new_angle = angle
    elif angle_action == 2: 
        new_angle = angle + 18

    new_angle_rad = math.radians(new_angle)

    new_x = current_x + math.cos(new_angle_rad)
    new_y = current_y + math.sin(new_angle_rad)
    return round(new_x), round(new_y),mapping_thrust[thrust]


boost = True
while True:

    x, y, next_checkpoint_x, next_checkpoint_y, next_checkpoint_dist, next_checkpoint_angle = [int(i) for i in input().split()]
    opponent_x, opponent_y = [int(i) for i in input().split()]
    state = discretized_state(next_checkpoint_angle, next_checkpoint_dist,x,y )
    action = np.argmax(qtable[state])
    next_checkpoint_x,next_checkpoint_y,thrust = convert_action(action,x,y,next_checkpoint_x, next_checkpoint_y)
    if thrust ==100:
        thrust = "BOOST"
        boost=False

    past_pos= (x,y)

    print(str(next_checkpoint_x) + " " + str(next_checkpoint_y) + " " + str(thrust))
