import numpy as np
import math

STATE_DIM = 4
ACTION_DIM = 15

# classe de module (ici une couche)
class Module(object):
    def __init__(self):
        self._parameters = None
        self._gradient = None

    def zero_grad(self):
        ## Annule gradient
        pass

    def forward(self, X):
        ## Calcule la passe forward
        pass

    def update_parameters(self, gradient_step=1e-3):
        ## Calcule la mise a jour des parametres selon le gradient calcule et le pas de gradient_step
        self._parameters -= gradient_step*self._gradient

    def backward_update_gradient(self, input, delta):
        ## Met a jour la valeur du gradient
        pass

    def backward_delta(self, input, delta):
        ## Calcul la derivee de l'erreur
        pass

# Classe représentant une couche linéaire
class Linear(Module):
    def __init__(self, in_features, out_features):
        super().__init__()
        self.in_features= in_features
        self.out_features = out_features
        # initialisation des poids glorot
        limit = np.sqrt(2 / self.in_features)
        self._parameters = np.random.normal(0, limit, (self.in_features, self.out_features))
        self._bias = np.random.normal(0, limit, (1, self.out_features))
        self._gradient = np.zeros_like(self._parameters)
        self._bias_gradient = np.zeros_like(self._bias)

    def forward(self, X):
        # print(f"X shape: {X.shape}")
        # print(f"parameters shape: {self._parameters.shape}")
        assert(X.shape == (len(X),self.in_features))
        res = X @ self._parameters + self._bias
        assert(res.shape == (len(X),self.out_features))
        return res

    def backward_update_gradient(self, input, delta):  
            # print(f"input shape: {input.T.shape}")
            # print(f"delta shape: {delta.shape}")
            self._gradient += input.T @ delta  # Accumulation du gradient
            self._bias_gradient += np.sum(delta, axis=0)  # Accumulation du gradient pour le biais

    def backward_delta(self, input, delta):
        # print(f"input shape: {self._parameters.T.shape}")
        # print(f"delta shape: {delta.shape}")
        return delta @ self._parameters.T   # Produit matriciel pour la rétropropagation
    
    def update_parameters(self, gradient_step=1e-3):
        # Mise à jour des paramètres de la couche
        self._parameters -= gradient_step * self._gradient
        self._bias -= gradient_step * self._bias_gradient
    
    def zero_grad(self):
        self._gradient = np.zeros((self.in_features, self.out_features))
        self._bias_gradient = np.zeros((1, self.out_features))

# module d'activation tanH
class TanH(Module):
    def __init__(self):
        super().__init__()

    def forward(self, X):
        res = np.tanh(X)
        return res
    
    def update_parameters(self, gradient_step=1e-3):
        # rien a faire
        pass

    def backward_update_gradient(self, input, delta):
        # rien a faire
        pass

    def backward_delta(self, input, delta):
        return (1 - np.tanh(input) ** 2) * delta 
    
    

# module d'activation sigmoide
class Sigmoid(Module):
    def __init__(self):
        super().__init__()

    def forward(self, X):
        X = np.clip(X, -500, 500)
        return np.where(X >= 0,
                    1 / (1 + np.exp(-X)),
                    np.exp(X) / (1 + np.exp(X)))
    
    def update_parameters(self, gradient_step=1e-3):
        # rien a faire
        pass

    def backward_update_gradient(self, input, delta):
        # rien a faire
        pass
    
    def backward_delta(self, input, delta):
        return self.forward(input) * (1 - self.forward(input)) * delta 
    

class Sequentiel(Module):
    def __init__(self, *args):
        super().__init__()
        self.modules = list(args) 
        self._forwards = []

    def print(self):
        for i in range(len(self.modules)):
            print(self.modules[i])


    def forward(self, X):
        self._forwards = []
        for module in self.modules:
            self._forwards.append(X)
            X = module.forward(X)
        return X

    def backward_update_gradient(self, input, delta):

        for i in reversed(range(len(self.modules))):
            input = self._forwards[i]
            
            self.modules[i].backward_update_gradient(input, delta)
            delta = self.modules[i].backward_delta(input, delta)

        return delta


    def update_parameters(self, gradient_step=1e-3):
        for module in self.modules:
            module.update_parameters(gradient_step)
    

    def zero_grad(self):
        for module in self.modules:
            module.zero_grad()
        pass


# module d'activation ReLU
class ReLU(Module):
    def __init__(self):
        super().__init__()

    def forward(self, X):
        return np.maximum(0, X)
    
    def update_parameters(self, gradient_step=1e-3):
        # rien à faire
        pass

    def backward_update_gradient(self, input, delta):
        # rien à faire
        pass

    def backward_delta(self, input, delta):
        return delta * (input > 0).astype(float)
    


couche_1 = Linear(STATE_DIM + ACTION_DIM,64)
# couche_2 = Linear(128,128)
sortie = Linear(64,1)

couche_1._parameters = [[-3.55050201e-03,  1.58229947e-01,  4.40909922e-01,  1.94281161e-01,
   3.13751847e-01,  6.50307462e-02,  1.20118551e-01,  2.60231823e-01,
   2.49723971e-01,  2.83110112e-01,  3.93588483e-01,  4.37224597e-01,
   1.76759705e-01,  4.29612175e-02, -4.24214499e-03,  3.82173002e-01,
   1.06571406e-01,  3.39877084e-02,  5.73884070e-01],
 [ 1.55603155e-01, -1.49925143e-01, -1.33482412e-01,  1.11477382e-01,
   1.81153849e-01,  8.30647647e-02, -1.87068328e-01, -9.30153206e-02,
  -1.47300020e-01,  3.41876298e-02, -2.47917306e-02, -8.12212601e-02,
  -7.73683190e-02, -8.18797797e-02,  1.49156734e-01,  1.16782606e-01,
   8.55468065e-02, -1.82145294e-02,  8.20711106e-02],
 [ 1.86494678e-01,  1.30453691e-01,  4.25481290e-01,  2.09696189e-01,
   3.48677635e-01,  7.19948858e-02,  1.72914043e-01,  3.56837392e-01,
   1.27386883e-01,  3.51305425e-01,  1.53524885e-02,  2.70065486e-01,
   5.74829169e-02, -1.46636125e-02,  3.55443060e-02,  3.86181146e-01,
   2.47738630e-01,  1.40323997e-01,  3.21753085e-01],
 [-1.86216049e-02,  6.25769123e-02, -3.34788084e-01,  1.05670735e-01,
  -1.49519831e-01,  1.43641472e-01, -1.65557086e-01,  5.45118004e-02,
   1.11819968e-01, -9.86402389e-03, -1.14617974e-01, -2.08116159e-01,
  -2.72293329e-01, -2.57770550e-02, -1.72530442e-01, -2.11083829e-01,
   4.69503552e-02,  5.68456613e-02, -2.42406763e-02],
 [ 1.52859151e-01,  1.63915306e-01,  4.04426426e-01,  1.94559127e-01,
   1.97943881e-01,  3.58474582e-01,  3.64566475e-01,  3.65850851e-02,
   1.46329135e-01,  1.52471900e-01,  1.63842395e-01,  3.14473361e-01,
   1.83064312e-01,  2.79551327e-01,  1.89456537e-01,  4.35648471e-01,
   3.91606092e-01,  2.91219085e-01,  5.31480193e-01],
 [ 1.32300466e-01,  4.92718220e-02,  4.69849527e-01,  5.13307512e-01,
   3.91550779e-01,  3.82046282e-01,  2.60972470e-01,  1.78529114e-01,
   1.68364093e-01,  1.41693383e-01, -3.73823172e-03,  3.29541385e-01,
   1.37528181e-01,  1.85041782e-02,  4.00311410e-01,  2.32666060e-01,
   2.22845748e-01,  1.79864258e-01,  7.24154830e-01],
 [ 1.38258502e-01,  2.22822368e-01,  2.91660160e-01,  5.04560888e-01,
   3.13947946e-01,  3.90522629e-01,  2.76638359e-01,  2.11028278e-01,
   3.17296125e-02,  2.09608257e-01,  5.30047938e-02,  1.91044047e-01,
  -4.86031314e-03,  3.42311442e-01,  4.31517422e-01,  1.12840367e-04,
   1.13552302e-01,  5.24313673e-02,  5.15883088e-01],
 [-2.36945376e-01,  1.21103726e-01,  2.79085815e-01,  8.97699073e-02,
  -2.50459909e-01,  9.88580436e-02,  2.01575998e-02, -5.08445427e-02,
   1.74704164e-01, -1.86290711e-01, -5.65446056e-02, -1.91413432e-01,
  -1.17334440e-01, -1.66644081e-01, -1.63283959e-01, -3.00066434e-02,
   1.52047366e-01, -9.87406522e-02,  1.05431743e-01],
 [ 1.13030616e-02,  1.31322935e-01,  1.49963707e-01,  2.27630779e-01,
   8.84900093e-02,  1.58535019e-01,  9.85902771e-02,  2.79597491e-01,
   1.06906109e-01, -7.77622126e-03,  2.65662611e-01,  3.19095254e-01,
  -2.74613965e-02,  2.12669700e-01,  1.02649570e-01,  2.49258708e-02,
   3.53003442e-01,  4.13507521e-02,  6.06513143e-01],
 [ 8.10894668e-02, -1.93537608e-01, -6.00349605e-02,  7.20246211e-02,
   1.07138239e-01, -5.84422648e-02,  4.63795848e-02,  1.80425346e-01,
   1.65391907e-01, -1.21797197e-01,  1.19885072e-01, -1.04724489e-01,
  -1.78372189e-01,  2.64058653e-02, -1.85449481e-01, -7.05520138e-02,
   7.07997903e-02,  1.93045847e-02, -7.18289390e-02],
 [ 1.05175324e-01,  5.55403084e-02,  6.40237033e-01,  3.31817180e-01,
   1.68685600e-01,  2.04836249e-01,  4.38135445e-01,  1.94266617e-01,
   1.36249676e-01,  3.33729088e-01,  5.20803154e-01,  2.84933239e-01,
   2.88402140e-01,  1.99856952e-01,  2.24304318e-01,  4.87775207e-01,
   2.52968222e-01,  1.50867105e-01,  5.52341998e-01],
 [-4.62347902e-02,  7.71941394e-02, -2.41255224e-01, -3.32240909e-01,
  -1.32309347e-02, -2.73609996e-01,  1.35045752e-01, -2.75278717e-01,
  -1.45623267e-01,  1.27273947e-01,  5.43071553e-02, -1.83984697e-01,
  -4.97681238e-02,  1.33090660e-01,  9.42582488e-02, -9.94647965e-02,
  -3.00805092e-01, -2.44488254e-01, -2.97439128e-01],
 [-1.39388382e-01,  1.10722631e-01,  1.40528232e-01,  4.35894132e-01,
   2.12678090e-02,  8.03786516e-02,  2.54279286e-01,  2.79654860e-01,
   2.61344552e-01,  8.03842992e-02,  1.05929047e-01,  3.54753524e-01,
   2.82965422e-01,  5.99411540e-02,  2.73076326e-01,  1.06540531e-01,
   6.20958172e-02,  1.80220589e-01,  5.16141593e-01],
 [ 1.39127880e-01,  1.18424140e-01,  3.76620084e-01,  9.08387527e-02,
   4.86110635e-02,  2.27283612e-01,  2.20853090e-01,  2.69658059e-01,
   6.17877692e-02,  5.93620948e-02,  1.24079712e-01,  2.85214692e-01,
   2.39230111e-01,  1.77408591e-01,  2.42737737e-02,  2.42091775e-01,
  -6.10251212e-03,  1.44760326e-01,  5.60432553e-01],
 [-1.30517587e-01, -2.64608692e-02,  1.38310362e-02, -2.31018707e-01,
   3.76487635e-02,  2.07841590e-01,  1.80321082e-01, -4.42438871e-02,
  -1.66434690e-01,  2.12870494e-01, -1.18964478e-01,  2.05823168e-01,
   5.09333573e-02, -4.01523337e-02, -1.47305116e-01,  3.71777825e-02,
  -2.07347065e-01, -1.04990073e-01,  2.99025737e-02],
 [-5.90042863e-03,  1.36438444e-01,  5.28901517e-01,  5.27669013e-01,
   1.86112255e-01,  2.21232608e-01,  2.79498268e-02,  2.44958282e-01,
   3.49696547e-01,  3.09929624e-02,  3.65841419e-01,  3.62583101e-01,
   2.01979369e-01,  1.68301582e-01,  6.55035451e-02,  1.19937016e-02,
   1.97916441e-02,  1.96776050e-03,  3.26618731e-01],
 [-1.13887787e-01,  2.97822714e-01,  5.11520445e-01,  2.80683696e-01,
   3.70947942e-02,  3.18652093e-01, -5.79051636e-02,  1.01001645e-02,
   1.31303877e-01,  2.87946671e-01, -4.99943309e-02,  2.72438169e-01,
   1.15232654e-01,  1.88241243e-01,  7.08660334e-02, -5.36331274e-02,
  -7.46282488e-02,  3.32197547e-02,  4.13699329e-01],
 [ 9.55819264e-02,  1.46822691e-01,  2.23855957e-01,  2.60187894e-01,
   1.96514204e-01,  2.14203745e-01,  2.13747218e-01,  2.21032009e-01,
   1.48277283e-01,  2.36535192e-01,  1.91802472e-01,  2.35954985e-01,
   1.08406313e-01, -1.21712498e-02, -2.86575966e-02,  3.25691909e-01,
   3.46852303e-01,  1.02534257e-01,  2.17749745e-01],
 [-1.12712220e-03,  9.12433714e-02, -1.41642272e-01, -1.45474240e-01,
  -1.53083831e-01, -8.83274525e-02, -1.43468872e-01, -2.73558289e-01,
  -2.96992391e-01, -2.58746296e-01, -2.37897545e-01, -1.26947425e-02,
  -6.95581883e-02, -1.16736721e-02, -5.69266779e-03,  7.34424219e-02,
  -1.37839228e-01, -1.79574355e-01, -2.63860226e-01],
 [-2.30308712e-01,  4.67203297e-02,  4.96939749e-01,  6.87476039e-01,
   1.27009407e-01,  4.51156318e-01,  3.59972179e-01,  1.65125638e-01,
   3.06960732e-01,  9.68330204e-02,  3.48511934e-01,  2.21574843e-01,
   1.05462186e-01,  4.46148276e-01,  5.42277455e-01,  5.01047730e-01,
   1.40494540e-01,  5.31731427e-01,  7.52453089e-01],
 [-2.01528922e-01,  2.42594868e-01,  3.03363144e-01,  2.02234745e-01,
   2.24574655e-01,  1.37783036e-01,  1.19503491e-01,  1.68204799e-01,
   1.27044588e-01,  1.38576195e-01,  1.48097888e-01,  3.83375943e-01,
   3.01411480e-01,  3.81015390e-02,  3.93023133e-01,  1.44241765e-01,
   1.20784476e-01,  3.51617992e-01,  2.77180016e-01],
 [ 1.54747637e-02, -3.00160982e-02, -1.45631179e-01,  5.10196798e-02,
  -2.20453545e-01,  2.60266885e-02, -2.06267595e-01, -1.74631819e-01,
  -6.33108690e-02,  2.64129564e-02, -1.36632219e-01, -4.93385866e-02,
  -2.09782526e-01, -1.12771787e-01,  5.12937270e-03, -6.08424246e-02,
  -7.22074136e-02,  1.25580713e-01,  2.00737610e-01],
 [-1.65675581e-01,  7.57915676e-02,  5.67656517e-01,  3.44444782e-01,
   3.51992011e-01,  1.63890064e-01,  4.84518647e-01,  1.32290900e-01,
   4.97159302e-01,  2.52342284e-01,  2.72119135e-01,  3.48068744e-01,
   4.29073274e-01,  2.62593001e-01,  2.62722671e-01,  4.09050822e-01,
   2.27515712e-01,  2.00646400e-01,  6.40743017e-01],
 [ 7.84792751e-02,  8.08698237e-02,  6.06735587e-01,  6.85701311e-01,
   2.88075775e-01,  4.10404861e-01,  3.00048172e-01,  1.51621476e-01,
   2.40037769e-01,  5.16706407e-01,  6.41567528e-01,  3.07228863e-01,
   4.50954199e-01,  6.74137354e-01,  3.66659820e-01,  5.71331739e-01,
   2.32615098e-01,  2.30054125e-01,  8.19602609e-01],
 [-9.25962552e-02,  1.34571686e-01, -5.48903085e-03, -1.27220705e-01,
  -1.45612285e-01,  4.35499325e-02, -8.38207901e-02, -3.47805530e-01,
  -4.86672204e-03, -2.71255970e-01, -1.43960983e-01, -9.01474580e-02,
  -8.41974616e-02, -6.59780055e-02, -1.09409586e-01, -2.16477454e-01,
  -2.65252411e-01, -3.08034897e-01, -3.49473536e-01],
 [ 6.30241483e-02, -8.55946392e-02, -1.46254897e-01,  2.76996680e-02,
  -1.76765084e-01, -6.41230941e-02, -1.72933340e-01, -1.04133382e-01,
  -1.19311050e-01, -1.12349279e-01,  1.22461049e-02,  7.02055022e-02,
   1.49147347e-01,  2.08654150e-01,  1.94784045e-01, -1.99235082e-01,
   9.52298641e-02,  7.60401934e-02,  1.68436859e-02],
 [ 1.23035423e-01,  1.20011821e-01, -8.77870619e-03,  4.79098633e-02,
  -2.62714565e-01,  8.20796937e-02,  5.78635819e-02,  2.29256097e-02,
  -6.40737489e-02, -2.07811236e-01, -2.26383656e-01, -1.15555607e-01,
  -1.41306922e-01, -8.30342323e-02, -3.58370692e-02,  6.98429048e-02,
  -7.79222101e-02, -1.59256443e-01, -3.83201498e-03],
 [ 1.96153909e-01,  1.56915355e-02,  7.45600045e-01,  3.79563957e-01,
   4.19494629e-01,  2.29885891e-01,  1.73769355e-01,  4.47811693e-01,
   2.72583216e-01,  1.92434937e-01,  4.78761196e-01,  3.37825596e-01,
   3.51117074e-01,  1.70268357e-01,  3.98712516e-01,  5.51135063e-01,
   1.21961400e-01,  1.61247656e-01,  7.21374035e-01],
 [ 1.80438757e-01,  1.24882519e-01,  3.37095976e-01,  2.10584745e-01,
   4.86708283e-02,  1.65873170e-01, -1.05508948e-02, -4.07370366e-02,
  -2.16857955e-01, -1.49993703e-01, -5.24390973e-02,  8.19819421e-02,
  -5.57448827e-02,  1.05723768e-01, -7.28168413e-02,  1.29006803e-01,
  -1.09462418e-01, -1.85184896e-01,  1.71732187e-01],
 [ 2.39858642e-01,  5.30174747e-02,  5.30043840e-01,  3.75475496e-01,
   1.43616825e-01, -2.39162985e-02,  1.45856058e-02,  1.75839990e-01,
   3.73455822e-01,  1.72112167e-01,  4.02148098e-01,  1.67160109e-01,
   2.42074952e-01, -1.29489461e-02,  3.66645843e-01,  2.54370600e-01,
   4.08056408e-01,  3.16155702e-01,  5.16602874e-01],
 [-1.35681346e-01,  5.60102537e-02,  5.55483997e-01,  5.24694800e-01,
   4.17182177e-01,  2.65169352e-01,  5.34463942e-01,  2.37380475e-01,
   5.31479299e-01,  1.19921736e-01,  2.73613304e-01,  4.77105141e-01,
   1.90675631e-01,  4.57867205e-01,  3.28007668e-01,  2.75670469e-01,
   4.70823348e-01,  4.33383942e-01,  5.32205880e-01],
 [-1.03456751e-01,  8.22746307e-02,  5.13422668e-01,  4.38506365e-01,
   3.64734203e-01,  4.53470834e-02,  9.69902724e-02,  2.47197658e-01,
   6.09477423e-02,  3.77662629e-01,  3.67100894e-01, -6.78265616e-02,
   2.96683997e-01,  3.19411755e-01,  9.80163962e-02,  2.55957156e-01,
   3.30592275e-01,  3.97242792e-02,  6.06051743e-01],
 [-1.30899101e-01,  2.79215246e-01,  4.88437980e-01,  3.89344096e-01,
   3.02391499e-01,  2.80940771e-01,  3.11354309e-01,  3.72465402e-02,
   1.63553655e-01,  7.05003813e-02,  1.06146447e-01,  2.67377466e-01,
   2.78308839e-02,  1.48596555e-01,  3.78580652e-02,  3.07904869e-01,
   3.26688051e-01,  3.46014082e-01,  7.29570925e-01],
 [-6.50751498e-03,  7.41206482e-02,  7.06712902e-01,  7.30925977e-01,
   5.99481285e-01,  4.29432780e-01,  4.14765686e-01,  2.23060414e-01,
   2.80251890e-01,  4.47799355e-01,  4.20965582e-01,  4.71893400e-01,
   3.98418725e-01,  6.08145654e-01,  2.49306589e-01,  5.00834346e-01,
   1.82618514e-01,  3.81600201e-01,  6.86862767e-01],
 [ 1.64964944e-02,  2.46945217e-01,  4.07969415e-01,  1.66427359e-01,
   2.17298239e-01,  3.54064077e-01,  1.60461798e-01,  3.64392877e-01,
   8.76476988e-02,  7.99565539e-02, -5.38925305e-02,  1.32816866e-01,
   2.23945186e-01,  3.04000467e-01,  1.31999537e-01, -1.56756509e-02,
   2.71057039e-01,  1.05496347e-01,  5.74351788e-01],
 [ 1.74596861e-01,  1.23652883e-01, -1.44346893e-01, -2.70687342e-02,
  -1.03168547e-01,  7.67479688e-02, -2.08545640e-01, -2.17407763e-01,
  -1.67538628e-01, -1.52390882e-01, -2.97531486e-01, -2.36011386e-01,
  -3.04029226e-01, -1.29764393e-01, -2.48914375e-03, -2.68522352e-01,
   9.49237570e-02, -1.55710056e-01, -1.41128361e-01],
 [ 6.11642599e-02, -4.40868251e-02, -1.62703142e-01, -2.75682304e-02,
   1.33586794e-01,  2.10771501e-01,  2.28798226e-01,  1.02819338e-01,
   1.53416395e-01,  2.11380437e-01, -8.03389922e-02, -8.81158412e-02,
  -2.58976221e-02,  2.57502124e-02,  1.95551053e-01, -2.01446209e-02,
   2.18583703e-01, -7.82510191e-02, -8.08422044e-02],
 [ 1.37039423e-01, -9.75520536e-02,  2.49719918e-02,  2.95438077e-02,
   1.09412841e-01, -2.12324977e-01,  1.10673197e-01, -2.12024618e-03,
   1.34618878e-01, -1.41328171e-01, -9.83589366e-02,  1.07026823e-01,
  -9.41111222e-02, -6.66157156e-03,  1.28378989e-02,  4.13590074e-02,
  -2.05080941e-01,  2.28420898e-01,  1.70176476e-01],
 [-2.03323320e-01,  1.44984767e-01,  1.81420133e-01,  1.13145880e-01,
   2.12263942e-01,  6.43615201e-02,  4.52400558e-02,  2.24893406e-01,
   4.07724828e-02,  2.48761892e-01,  1.29096076e-01,  3.26397270e-01,
  -6.34175986e-02, -7.11186379e-02, -4.48493026e-02,  3.73574384e-02,
   2.85331011e-02,  1.52707189e-01,  3.51368397e-01],
 [-3.01439082e-03,  1.16041660e-01, -1.85789302e-01, -8.24503154e-02,
  -1.12097628e-01, -1.11883022e-01,  1.02407753e-01, -2.64395982e-01,
  -2.86023110e-01,  5.45030236e-02,  9.54738855e-02,  5.53692989e-02,
   6.24932200e-02, -2.09951654e-01,  1.13184720e-01, -6.64410666e-02,
  -1.83495820e-01, -3.03461589e-02, -2.23054484e-01],
 [-7.52582625e-02,  4.66656573e-02,  6.22948050e-01,  4.59556729e-01,
   4.55509096e-01,  3.93637598e-01,  3.54359031e-01,  8.27302635e-02,
   9.34816673e-02, -3.86178610e-04,  5.26063666e-02,  9.10934177e-04,
   1.88013405e-01,  2.61924475e-01,  6.16319152e-03,  8.63871202e-02,
   3.19460034e-01,  2.73797847e-02,  7.39619672e-01],
 [-2.15148076e-01,  1.35785252e-01,  1.96725100e-01,  2.82481164e-01,
   1.66963823e-02, -1.60279833e-02,  1.37812465e-01,  1.61098510e-01,
   4.32559550e-02,  2.84175634e-01,  1.31169468e-01,  1.09202594e-01,
   6.46110550e-02,  7.09352344e-02,  2.47037914e-02,  3.32256287e-01,
   5.62887192e-02,  2.74979860e-01,  2.79276073e-01],
 [-1.10983983e-01,  6.80472031e-02,  4.02885318e-01,  2.36060530e-01,
   8.21283534e-02,  3.54937822e-01,  1.78132430e-01, -5.26351109e-02,
   1.33642986e-01,  4.17544276e-01,  1.48848861e-01,  2.79560626e-01,
   2.82289505e-01,  3.58679563e-01,  1.57366201e-01,  2.63570677e-02,
   1.78685501e-01,  7.07329437e-02,  6.71761334e-01],
 [ 2.20362261e-01,  8.44998583e-02,  3.72850686e-01,  5.22599101e-01,
   3.55251022e-02,  2.37229362e-01,  8.47152993e-02, -6.84675798e-02,
  -6.52442779e-03,  4.40788940e-02,  3.04294646e-01,  1.69421226e-01,
   1.97975114e-01,  3.40565413e-01,  2.24572018e-01,  2.09363014e-01,
   3.41817796e-01,  1.27001628e-01,  3.70889515e-01],
 [-1.51647869e-02,  1.04963899e-01,  2.96720833e-01,  5.28193831e-01,
   1.37421384e-01,  1.13898307e-01,  6.60824105e-02, -6.97113797e-02,
  -4.28189039e-02,  4.18881215e-02,  3.03957939e-01, -5.01977950e-02,
  -6.00292198e-02,  2.45489269e-01,  3.31751645e-01, -3.36814392e-03,
   1.98484272e-01,  1.33590922e-01,  4.89451468e-01],
 [-2.27170512e-01, -1.20107764e-02,  3.50713611e-01,  3.54615003e-02,
   2.33425468e-01,  1.67718887e-01,  1.15497187e-01,  2.01898023e-01,
   1.01580799e-01,  1.19469874e-01,  2.86544524e-02,  4.28384393e-02,
   3.37177031e-02,  3.80957574e-01,  1.44855022e-01,  1.29430324e-01,
  -1.30629689e-02,  9.89509281e-04,  3.31979156e-01],
 [ 9.94021222e-02, -1.83526635e-01, -1.26891643e-01, -1.21624190e-02,
  -1.95872203e-01, -6.78754672e-02, -6.82191029e-02, -1.47705888e-02,
  -1.89405859e-01, -9.65039209e-02,  1.74079627e-01, -1.68971226e-01,
  -1.03998333e-01,  9.16915387e-03, -1.31618202e-01,  5.43557443e-02,
   1.94262236e-01, -4.60049137e-02, -1.17604755e-01],
 [-9.57207382e-02,  4.69160415e-02,  6.68154955e-01,  3.02895874e-01,
   2.10798055e-01,  3.11590493e-01,  5.82767248e-01,  3.52526188e-01,
   3.33339274e-01,  2.58374602e-01,  2.51985818e-01,  3.66549551e-01,
   3.68765384e-01,  5.44642925e-01,  2.15849206e-01,  4.33631241e-01,
   1.20519087e-01,  7.35705420e-02,  5.25112271e-01],
 [ 8.42896327e-02,  1.48471072e-01,  7.31780902e-02,  1.14414943e-02,
  -1.94020905e-02, -1.58681139e-01, -1.04474820e-01, -8.47045109e-02,
   1.24704123e-01, -1.14081882e-01, -1.34587124e-01,  9.63443890e-02,
  -9.44573358e-02, -1.29490435e-01,  1.23613149e-01,  4.60207425e-02,
  -4.01590206e-02, -2.86378801e-01, -1.78323060e-01],
 [ 1.78697422e-01,  2.80563354e-01,  3.10286492e-01,  2.96786755e-01,
   3.24694902e-01,  1.24599576e-01,  1.37050534e-02,  2.15685397e-01,
   8.78356248e-02,  1.11687042e-01,  3.65023166e-01,  1.71570584e-01,
   3.53519797e-01,  2.29893327e-01,  5.30926744e-03,  8.82098228e-02,
   1.58558905e-01,  1.24911834e-02,  3.89640182e-01],
 [ 5.78114837e-02,  1.19684361e-01, -6.56112209e-02,  4.24680151e-02,
  -2.23363087e-01, -2.75303602e-01, -1.56603754e-01, -6.69452548e-02,
  -6.08666725e-02,  1.37524962e-01, -2.53328592e-01, -3.65772694e-02,
   1.26471296e-01,  1.35035083e-01, -2.73603529e-01, -1.61959723e-01,
  -2.09081262e-01, -5.78963868e-02, -1.50440454e-01],
 [-8.43234137e-02,  8.54870379e-02,  5.40996432e-01,  5.42467892e-01,
   6.51184320e-02,  1.10781483e-01,  1.17737740e-01, -6.49403334e-02,
   3.02883834e-01,  1.08010098e-01,  6.38894690e-03,  1.67640507e-01,
  -2.93094059e-03,  2.88227469e-01, -4.86585982e-02,  1.70458123e-01,
   3.54140326e-02,  2.45798558e-01,  6.54009819e-01],
 [-1.57785714e-02,  1.52690113e-01,  5.00207484e-01,  4.59399134e-01,
   2.31588632e-01,  2.06624955e-01,  3.95427138e-01,  1.26348540e-01,
   4.73748781e-02,  5.51239885e-02,  6.50200024e-02,  3.23287874e-01,
   3.79057795e-01,  4.03902024e-01,  6.53023496e-02,  2.46261358e-01,
   4.04486775e-01,  1.28322393e-01,  4.91012871e-01],
 [ 4.15892787e-02, -2.20166638e-01, -2.27295816e-01,  1.53237674e-02,
  -9.47811529e-02, -8.39156583e-02,  2.05533877e-01, -7.73351490e-02,
   1.10982455e-01, -9.07721668e-02, -1.36037335e-01, -7.10905865e-02,
  -6.58661798e-02, -1.60022795e-01, -2.02939302e-01, -3.34916674e-02,
   1.06817717e-02,  2.03770593e-01, -1.68915406e-01],
 [ 5.72674014e-02, -2.12779671e-01, -2.23032072e-01,  4.30626236e-02,
  -1.81331217e-01, -2.18708009e-01, -1.49112701e-01, -1.50106207e-01,
  -9.38859582e-02, -6.34583309e-02, -1.09491855e-01,  4.35976982e-02,
   1.88017637e-01, -3.55250835e-02,  2.12411642e-01,  1.71821699e-01,
  -7.07885474e-02, -9.69941393e-02, -5.85892349e-02],
 [-1.58909976e-01,  1.21094540e-01,  5.09702563e-01,  4.07920420e-01,
   2.61914045e-01,  3.85642171e-01,  1.18844241e-01,  3.69568765e-01,
   3.91827375e-01,  3.54651779e-01,  2.69822448e-01, -3.58182238e-04,
   1.39274284e-01,  2.49453679e-01, -5.09590991e-02,  3.82115066e-01,
   3.54749769e-01,  5.90314977e-02,  5.15253186e-01],
 [ 2.59297825e-02,  7.90779069e-02,  4.62993503e-01,  2.39394620e-01,
   1.90609217e-01,  3.63181055e-01, -2.04880945e-02,  2.78633863e-01,
   7.42728114e-02,  2.10351095e-01,  3.43197972e-01,  2.41876036e-01,
   4.25968803e-02,  2.71503448e-01,  2.05683678e-01,  2.67458677e-01,
   1.60776272e-01,  3.76303405e-01,  6.35742605e-01],
 [-7.22172344e-03,  1.39855593e-01,  4.18573886e-01,  1.53503090e-01,
   2.56555658e-02,  1.09311454e-01,  2.50497729e-01,  2.32881546e-01,
   3.51880305e-02,  1.21756181e-01,  2.05244586e-01,  2.17023700e-01,
   9.48364809e-02,  3.63789648e-01,  1.40028656e-01,  1.83320090e-01,
   2.69371629e-01,  3.44452500e-01,  5.22978485e-01],
 [-7.21376389e-02,  5.41241392e-02,  5.09747982e-01,  2.39066586e-01,
   3.21504414e-01,  2.51675546e-01,  7.10948929e-02,  1.71609089e-01,
   4.13430929e-01,  1.12459809e-01,  2.51039833e-01,  2.23872513e-02,
   3.73830706e-01,  3.20854485e-01,  4.05038923e-01,  3.13152879e-01,
   3.53889853e-01,  1.46492183e-01,  5.90762496e-01],
 [-1.37855724e-01,  3.57452258e-02, -1.12939365e-01, -1.41540006e-01,
   1.52895123e-01,  1.59387469e-01, -2.84469545e-01, -1.43194929e-01,
  -2.31464043e-01, -2.26613835e-01, -2.70683140e-01, -9.07759666e-02,
  -4.68559302e-02, -2.91601717e-01, -2.06425358e-02, -5.51594421e-02,
   8.66260976e-02, -2.24362507e-01, -2.21642386e-02],
 [ 1.27894685e-01,  1.50234923e-01,  2.09969893e-01,  4.20956761e-01,
   9.47084129e-02, -3.39866728e-02, -6.67632967e-02,  2.89358616e-01,
  -5.61290905e-02, -1.29648047e-02, -1.34348695e-03,  1.67614609e-01,
   3.52346636e-02,  1.97252706e-02,  3.79044890e-01,  4.32383083e-03,
   3.29070419e-01,  2.61997022e-02,  4.55901176e-01],
 [ 1.00935094e-01, -6.72244420e-03, -3.45642716e-02, -1.69372350e-01,
  -3.52995917e-02,  3.16696912e-02, -1.72833994e-01,  5.61870523e-02,
  -2.25360513e-01, -2.02200130e-01,  1.14007741e-02,  6.52384833e-02,
   8.77614543e-02,  7.04495236e-02,  2.60601137e-02,  3.95466052e-02,
  -9.81681347e-02,  1.35815114e-01, -1.04011595e-01],
 [-1.97460830e-01,  1.32934436e-01,  5.14235020e-01,  4.35964137e-01,
   2.77890563e-01,  2.41075918e-01,  3.29297483e-01,  4.72519360e-02,
   3.22946101e-01,  2.23696694e-01,  1.17242977e-01,  3.11901420e-01,
   2.46239170e-01,  3.45572770e-01,  4.50544208e-01,  2.34810933e-01,
   1.81292549e-01,  2.22018391e-01,  5.04469037e-01],
 [ 1.85668301e-02,  1.40728250e-01,  3.79398674e-01,  3.55102122e-01,
   2.34048828e-01,  3.56905818e-01,  1.14646338e-01,  3.60862941e-01,
   2.76402712e-01,  1.66215882e-01,  3.66779298e-01,  1.55360371e-01,
   5.04553504e-02,  2.48569369e-01,  2.49261364e-01,  1.29894435e-01,
  -6.11139610e-02,  3.50615531e-01,  3.27196330e-01]]
couche_1._bias =  [ 0.5494147 , -0.12536882,  0.45466062, -0.3319478 ,  0.2728523 ,
  0.6025171 ,  0.3334549 , -0.12055963,  0.30774727, -0.18664576,
  0.36722326, -0.35163417,  0.15582857,  0.2239524 ,  0.02356512,
  0.35398102,  0.36335343,  0.22586103, -0.04528367,  0.64245373,
  0.16910368, -0.1018617 ,  0.34085608,  0.6377253 , -0.31418508,
  0.0366403 , -0.08652916,  0.6871068 ,  0.24481514,  0.39244208,
  0.6175871 ,  0.13377564,  0.54177207,  0.47948092,  0.47846916,
 -0.3711835 , -0.04475763, -0.22010216,  0.20733733, -0.29013038,
  0.19974585,  0.403516  ,  0.5814938 ,  0.30343285,  0.243586  ,
  0.16623218, -0.06888665,  0.49732247, -0.26206988,  0.41229543,
  0.07715177,  0.34483188,  0.437704  ,  0.06669341,  0.03916828,
  0.15470862,  0.24892993,  0.46653363,  0.4887099 , -0.24035314,
  0.2565451 , -0.20355342,  0.20884141,  0.3563946 ]
sortie._parameters = [[ 0.10878824,  0.10896236,  0.19102304, -0.05797216,  0.10504098,
   0.37071672,  0.09354358,  0.02640812,  0.19878574,  0.02874413,
   0.4383197 , -0.10460576,  0.18794852,  0.20285796, -0.03420833,
   0.20712835,  0.20232928,  0.19720043, -0.03249523,  0.32459238,
   0.1320703 , -0.06909029,  0.48814204,  0.46843475, -0.04963368,
   0.01929392, -0.00153846,  0.5245198 ,  0.03488431,  0.32945862,
   0.42328092,  0.30385157,  0.09990384,  0.4872625 ,  0.21383236,
  -0.03676395, -0.11281583, -0.11767134,  0.04409223, -0.04775304,
   0.39039457,  0.04944578,  0.18849935,  0.16898333,  0.22164857,
   0.25159207, -0.06021124,  0.53871566,  0.00119853,  0.19010134,
  -0.0090292 ,  0.26151097,  0.1743883 ,  0.06896719, -0.09647712,
   0.220297  ,  0.08990801,  0.13430278,  0.2622799 , -0.03495133,
   0.15838693, -0.09953563,  0.12506342,  0.23979402]]
sortie._bias =  [0.23694119]

couche_1._parameters = np.array(couche_1._parameters)
couche_1._parameters = couche_1._parameters.T
# couche_2._parameters = np.array(couche_2._parameters)
# couche_2._parameters = couche_2._parameters.T
sortie._parameters = np.array(sortie._parameters)
sortie._parameters = sortie._parameters.T

reseau_mpr = Sequentiel(couche_1,ReLU(),
                        # couche_2,ReLU(),
                        sortie,ReLU())

model = reseau_mpr

past_pos= (0,0)

def compute_speed(x, y):
        return np.sqrt((x - past_pos[0])**2 + (y - past_pos[1])**2)

def compute_direction(x, y):
    x_past, y_past = past_pos
    direction_vector = (x - x_past, y - y_past)
    angle = math.degrees(math.atan2(direction_vector[1], direction_vector[0])) % 360
    return angle

def convert_action(action, x, y):
    # mapping_thrust = {0: 0, 1: 70, 2: 100}
    mapping_thrust= {0:0, 1:25, 2:50,3:70,4: 80, 5:100}
    thrust = mapping_thrust[action // 7]
    # mapping_angle = {0: -90,1:-45, 2: 0, 3:45, 4: 90}
    mapping_angle = {0: -18,1:-9, 2: -3, 3:0, 4: 3, 5:9,6:18}
    x_past, y_past = past_pos

    angle_action = mapping_angle[action % 7]
    angle = math.degrees(math.atan2(y-y_past, x-x_past))
    
    new_angle = (angle + angle_action +540)%360 -180
    new_x = x + math.cos(math.radians(new_angle)) *500
    new_y = y + math.sin(math.radians(new_angle)) *500
    return int(round(new_x)), int(round(new_y)), thrust

while True:
    x, y, next_checkpoint_x, next_checkpoint_y, next_checkpoint_dist, next_checkpoint_angle = [int(i) for i in input().split()]
    opponent_x, opponent_y = [int(i) for i in input().split()]

    vitesse = compute_speed(x,y)
    direction = compute_direction(x,y)

    actions = np.eye(ACTION_DIM, dtype=np.float32)
    stateM = [next_checkpoint_angle,next_checkpoint_dist,vitesse,direction]
    state_array = np.array(stateM, dtype=np.float32)
    states = np.repeat(state_array[np.newaxis, :], ACTION_DIM, axis=0)
    q_values = model.forward(np.concatenate([states, actions], axis=1)) 
    action = np.argmax(q_values)

    target_x, target_y, thrust = convert_action(action,x,y)

    past_pos= (x,y)

    print(f"{next_checkpoint_x} {next_checkpoint_y} {thrust}")