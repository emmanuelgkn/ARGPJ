import numpy as np
# from 
import time
import os
import sys

src_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))

if src_path not in sys.path:
    sys.path.insert(0, src_path)

from envnn import MPR_envnn


# classe de module (ici une couche)
class Module(object):
    def __init__(self):
        self._parameters = None
        self._gradient = None

    def zero_grad(self):
        ## Annule gradient
        pass

    def forward(self, X):
        ## Calcule la passe forward
        pass

    def update_parameters(self, gradient_step=1e-3):
        ## Calcule la mise a jour des parametres selon le gradient calcule et le pas de gradient_step
        self._parameters -= gradient_step*self._gradient

    def backward_update_gradient(self, input, delta):
        ## Met a jour la valeur du gradient
        pass

    def backward_delta(self, input, delta):
        ## Calcul la derivee de l'erreur
        pass

# Classe représentant une couche linéaire
class Linear(Module):
    def __init__(self, in_features, out_features):
        super().__init__()
        self.in_features= in_features
        self.out_features = out_features
        # initialisation des poids glorot
        limit = np.sqrt(2 / self.in_features)
        self._parameters = np.random.normal(0, limit, (self.in_features, self.out_features))
        self._bias = np.random.normal(0, limit, (1, self.out_features))
        self._gradient = np.zeros_like(self._parameters)
        self._bias_gradient = np.zeros_like(self._bias)

    def forward(self, X):
        # print(f"X shape: {X.shape}")
        # print(f"parameters shape: {self._parameters.shape}")
        assert(X.shape == (len(X),self.in_features))
        res = X @ self._parameters + self._bias
        assert(res.shape == (len(X),self.out_features))
        return res

    def backward_update_gradient(self, input, delta):  
            # print(f"input shape: {input.T.shape}")
            # print(f"delta shape: {delta.shape}")
            self._gradient += input.T @ delta  # Accumulation du gradient
            self._bias_gradient += np.sum(delta, axis=0)  # Accumulation du gradient pour le biais

    def backward_delta(self, input, delta):
        # print(f"input shape: {self._parameters.T.shape}")
        # print(f"delta shape: {delta.shape}")
        return delta @ self._parameters.T   # Produit matriciel pour la rétropropagation
    
    def update_parameters(self, gradient_step=1e-3):
        # Mise à jour des paramètres de la couche
        self._parameters -= gradient_step * self._gradient
        self._bias -= gradient_step * self._bias_gradient
    
    def zero_grad(self):
        self._gradient = np.zeros((self.in_features, self.out_features))
        self._bias_gradient = np.zeros((1, self.out_features))

# module d'activation tanH
class TanH(Module):
    def __init__(self):
        super().__init__()

    def forward(self, X):
        res = np.tanh(X)
        return res
    
    def update_parameters(self, gradient_step=1e-3):
        # rien a faire
        pass

    def backward_update_gradient(self, input, delta):
        # rien a faire
        pass

    def backward_delta(self, input, delta):
        return (1 - np.tanh(input) ** 2) * delta 
    
    

# module d'activation sigmoide
class Sigmoid(Module):
    def __init__(self):
        super().__init__()

    def forward(self, X):
        X = np.clip(X, -500, 500)
        return np.where(X >= 0,
                    1 / (1 + np.exp(-X)),
                    np.exp(X) / (1 + np.exp(X)))
    
    def update_parameters(self, gradient_step=1e-3):
        # rien a faire
        pass

    def backward_update_gradient(self, input, delta):
        # rien a faire
        pass
    
    def backward_delta(self, input, delta):
        return self.forward(input) * (1 - self.forward(input)) * delta 
    

class Sequentiel(Module):
    def __init__(self, *args):
        super().__init__()
        self.modules = list(args) 
        self._forwards = []

    def print(self):
        for i in range(len(self.modules)):
            print(self.modules[i])


    def forward(self, X):
        self._forwards = []
        for module in self.modules:
            self._forwards.append(X)
            X = module.forward(X)
        return X

    def backward_update_gradient(self, input, delta):

        for i in reversed(range(len(self.modules))):
            input = self._forwards[i]
            
            self.modules[i].backward_update_gradient(input, delta)
            delta = self.modules[i].backward_delta(input, delta)

        return delta


    def update_parameters(self, gradient_step=1e-3):
        for module in self.modules:
            module.update_parameters(gradient_step)
    

    def zero_grad(self):
        for module in self.modules:
            module.zero_grad()
        pass


# module d'activation ReLU
class ReLU(Module):
    def __init__(self):
        super().__init__()

    def forward(self, X):
        return np.maximum(0, X)
    
    def update_parameters(self, gradient_step=1e-3):
        # rien à faire
        pass

    def backward_update_gradient(self, input, delta):
        # rien à faire
        pass

    def backward_delta(self, input, delta):
        return delta * (input > 0).astype(float)
    

# Pour bruiter les images
def add_gaussian_noise(images, mean=0.0, std=0.1):
    noise = np.random.normal(mean, std, images.shape)
    noisy_images = images + noise
    return np.clip(noisy_images, 0.0, 1.0)


STATE_DIM = 4
ACTION_DIM = 15

couche_1 = Linear(STATE_DIM + ACTION_DIM,64)
# couche_2 = Linear(128,128)
sortie = Linear(64,1)

couche_1._parameters =  [[-1.87525645e-01, -1.94368541e-01, -1.27099842e-01,  4.51988424e-04,
   3.34512182e-02, -1.55394480e-01,  9.89090279e-02,  1.60837322e-01,
   1.91464707e-01, -8.74027014e-02, -1.51889384e-01, -3.65289338e-02,
  -1.41574908e-02, -1.75604632e-03,  8.81443098e-02,  3.65481898e-02,
   5.58397844e-02, -1.71259448e-01, -1.31333932e-01],
 [ 1.31025091e-02, -5.04409894e-02,  2.90169656e-01,  8.07616636e-02,
   1.20908208e-01,  1.35377184e-01,  5.27676642e-01,  4.79756743e-01,
   1.27428606e-01,  4.35927391e-01,  4.61220324e-01,  3.77529889e-01,
   5.07571816e-01,  3.47925007e-01,  3.14778000e-01,  2.37027243e-01,
   2.80594796e-01,  1.30118683e-01,  6.28055155e-01],
 [-1.04246080e-01,  2.36746103e-01, -8.13945848e-03, -4.72376831e-02,
   2.60530919e-01,  3.03131640e-01, -8.18615109e-02,  2.30573386e-01,
   3.35266352e-01, -2.97715459e-02, -5.36407391e-03,  3.02541077e-01,
  -7.65939206e-02,  2.50129193e-01, -1.41983368e-02,  1.11728646e-01,
  -4.50350530e-02,  2.25088909e-01,  6.26327217e-01],
 [ 2.38430679e-01,  4.03009653e-02,  2.36289486e-01,  2.30459407e-01,
   1.57361925e-01,  1.19181946e-02,  4.24457729e-01,  1.13127604e-01,
   3.74484420e-01,  3.79635513e-01,  1.77446291e-01,  1.99158669e-01,
   7.79922353e-03,  2.76038080e-01, -8.92132055e-03,  3.40761542e-01,
   5.80119938e-02,  2.03760698e-01,  7.89222479e-01],
 [-8.67451578e-02, -3.30091983e-01,  4.13516998e-01,  3.24995428e-01,
  -1.01134211e-01,  6.72407374e-02,  1.27925396e-01, -1.18924789e-01,
  -1.02709293e-01, -3.10891378e-03, -1.37636689e-02, -1.32949442e-01,
   1.38316900e-01,  2.03116149e-01,  7.72054344e-02, -1.86090052e-01,
  -2.19684899e-01,  1.85649753e-01,  1.57975584e-01],
 [-2.04056576e-01, -5.85665107e-02, -2.19025165e-01,  7.76278554e-03,
   1.53268248e-01, -2.00076327e-02,  4.17519510e-02,  2.12447420e-02,
  -1.89527739e-02, -1.18615337e-01, -1.13058639e-04, -2.10724454e-02,
   2.12450594e-01, -1.39102414e-01, -6.93193302e-02, -1.43811390e-01,
   8.68250728e-02,  1.26201510e-01,  1.56205773e-01],
 [-1.34096771e-01, -4.15627025e-02,  4.00312364e-01,  2.56818026e-01,
   6.25456393e-01,  4.15782243e-01,  2.36090034e-01,  6.31506622e-01,
   5.82922041e-01,  3.93321633e-01,  4.02248502e-01,  6.48719311e-01,
   5.75655460e-01,  3.68814141e-01,  4.57859188e-01,  5.21928728e-01,
   3.81771922e-01,  5.52698195e-01,  9.09798026e-01],
 [ 5.59449382e-02,  7.75983110e-02,  2.51581240e-02,  1.49345994e-01,
   8.56506452e-02, -3.14222038e-01, -1.30294979e-01, -2.80487269e-01,
  -2.56522775e-01, -3.35842073e-02, -7.54033402e-02,  9.70429853e-02,
  -2.28424668e-01, -3.10361385e-01,  5.19704744e-02,  1.97657421e-02,
  -2.32134789e-01, -1.66556854e-02, -1.99769825e-01],
 [ 6.09825552e-02, -2.81941295e-02, -7.44494200e-02, -2.17078522e-01,
   6.86949641e-02, -2.06120104e-01, -5.07862493e-02, -2.28023365e-01,
  -4.71069738e-02,  5.28845340e-02,  1.93804309e-01, -1.07536986e-02,
  -1.78917646e-01,  1.76789314e-01,  3.88639234e-02, -2.29386762e-01,
   7.03772530e-02,  2.19128206e-01, -1.82730362e-01],
 [-1.77070588e-01, -7.63409212e-02,  3.40588205e-02, -9.22816694e-02,
   1.96641520e-01, -5.37517257e-02, -4.00850028e-02, -2.01436773e-01,
  -1.23974927e-01,  1.50729999e-01,  2.14637101e-01,  1.98322609e-01,
  -5.82150556e-02,  2.04231709e-01, -2.50153872e-03,  1.26176640e-01,
  -1.28027260e-01, -1.26372740e-01,  2.19398797e-01],
 [ 5.01815118e-02,  1.79320171e-01,  8.20600539e-02,  1.05091169e-01,
  -2.91745603e-01, -1.09673634e-01, -1.19475894e-01, -2.98025697e-01,
  -1.95442572e-01,  9.88472700e-02, -5.64039163e-02, -1.49803340e-01,
  -2.50398546e-01,  2.77190339e-02, -8.73039812e-02,  7.95833990e-02,
   9.22496989e-02, -1.62706241e-01, -6.01873994e-01],
 [ 2.43199334e-01, -4.31748480e-02, -5.06193750e-02,  2.28716493e-01,
  -6.23881519e-02,  2.05939710e-01,  3.17977816e-02,  1.26369715e-01,
   2.33292222e-01,  5.91330864e-02, -2.41873804e-02, -9.02230591e-02,
  -1.20397851e-01,  7.68806189e-02,  1.75473746e-02,  2.67715514e-01,
  -1.12900995e-01,  6.68228865e-02,  2.18677118e-01],
 [ 4.70420122e-02,  6.70497194e-02, -1.09799549e-01, -1.29430637e-01,
  -3.78601663e-02,  1.23147957e-01,  2.55123317e-01,  7.86529183e-02,
  -1.48796722e-01, -1.29051536e-01, -4.55867909e-02,  2.29806989e-01,
   1.15064234e-01,  6.60566390e-02, -1.77827507e-01,  2.46405959e-01,
   1.40851319e-01, -2.87499111e-02, -1.25180423e-01],
 [-1.26926169e-01, -7.75626581e-03,  5.06560326e-01,  1.10672265e-01,
   5.80728531e-01,  3.38982224e-01,  6.18069172e-01,  7.12804258e-01,
   5.48010230e-01,  6.79315507e-01,  4.81135666e-01,  4.39449072e-01,
   4.14953768e-01,  5.21033764e-01,  6.45765126e-01,  7.62257278e-01,
   5.50935268e-01,  5.20633817e-01,  8.83141458e-01],
 [ 1.10561505e-01, -1.80070207e-01, -1.32522941e-01,  1.25776511e-02,
   1.16425298e-01, -2.11496890e-01,  5.57401516e-02, -2.05065593e-01,
  -4.57819132e-03, -2.29252487e-01, -1.06700942e-01, -1.52867094e-01,
   2.15622246e-01,  1.42312363e-01, -1.01578623e-01, -7.47616291e-02,
  -1.12291679e-01, -3.87371331e-02,  1.34044617e-01],
 [ 5.36266305e-02,  8.88676867e-02,  9.78392065e-02,  1.63978532e-01,
  -4.27949540e-02, -2.07385257e-01,  4.47973087e-02, -5.23694567e-02,
   6.22925684e-02, -2.92604208e-01, -3.13673913e-01,  7.33964890e-02,
  -2.18688264e-01, -2.95816183e-01, -3.88825387e-02, -2.10726485e-01,
  -1.66414022e-01, -8.56737569e-02, -3.21168005e-01],
 [ 1.12782970e-01, -2.16913670e-01, -1.30448893e-01,  1.57009050e-01,
  -1.71951689e-02,  8.73589143e-02, -1.17524952e-01, -1.37715489e-01,
   1.63989842e-01,  1.04299389e-01, -1.31880775e-01,  2.11553201e-01,
  -1.88268319e-01, -2.20782742e-01,  2.12007165e-01, -2.13740945e-01,
   1.20191403e-01,  1.37508154e-01,  1.38482451e-01],
 [ 4.41060178e-02,  1.06880508e-01,  1.97351202e-01,  6.84605688e-02,
   3.88239801e-01,  1.37625322e-01,  2.25158513e-01,  1.73271090e-01,
   9.65038612e-02, -6.64110333e-02,  3.26672733e-01,  1.98649988e-01,
   9.09150168e-02,  1.28287617e-02, -4.59379591e-02, -5.88716120e-02,
   1.00108117e-01,  3.76755238e-01,  6.73755884e-01],
 [-6.04728907e-02, -1.04285575e-01, -2.09235743e-01, -1.73626378e-01,
  -3.27303112e-02,  2.02496499e-01, -4.84152976e-03,  1.50236577e-01,
  -1.61321014e-01,  1.78868398e-02, -2.17210561e-01, -5.29057272e-02,
   1.06651492e-01, -2.06638440e-01, -3.80288623e-02,  8.27579722e-02,
  -1.48531184e-01,  1.23949736e-01,  7.48962909e-03],
 [-1.07580222e-01,  2.54349768e-01,  3.17514509e-01,  2.80472636e-01,
   2.33244091e-01,  2.38872871e-01, -3.15905698e-02,  2.38898456e-01,
   2.91455120e-01,  3.98633420e-01,  2.13543296e-01, -2.09507141e-02,
   3.71901721e-01,  8.08019713e-02,  1.34203658e-01,  1.40714630e-01,
   1.09796897e-01,  2.21871749e-01,  5.71712554e-01],
 [-2.35201865e-02,  9.52466577e-02,  2.23848447e-01,  2.52555460e-01,
   4.30279791e-01,  3.91876176e-02,  3.18049133e-01,  3.69127333e-01,
   2.96883732e-01,  1.43792391e-01, -1.41245523e-03,  4.26857993e-02,
   1.48315271e-02,  3.94541770e-01,  7.04735145e-02,  1.39364868e-01,
   4.03779984e-01,  2.72944808e-01,  7.59805441e-01],
 [ 7.02061877e-02, -2.67335549e-02,  9.94388200e-03, -3.84282321e-02,
  -1.65585101e-01,  1.11522093e-01,  6.12886399e-02, -2.22026855e-01,
  -2.19592869e-01, -1.53388202e-01, -1.94828615e-01, -1.83807641e-01,
   8.88185874e-02, -9.71870050e-02, -1.46419257e-01, -7.42019108e-03,
   1.34488612e-01, -2.12452877e-02,  2.06793249e-01],
 [-5.30480919e-03, -3.17698568e-02,  4.86841738e-01,  2.14568064e-01,
   6.88897729e-01,  4.30404454e-01,  5.68535209e-01,  5.66340089e-01,
   3.07207108e-01,  6.07169092e-01,  5.23634076e-01,  6.70839787e-01,
   5.16520500e-01,  2.80715048e-01,  3.00470352e-01,  3.64500076e-01,
   3.65435213e-01,  4.39029932e-01,  1.01478386e+00],
 [-7.19946399e-02, -7.03315530e-03, -2.59837974e-03, -7.80870691e-02,
  -7.00891390e-02, -4.76932712e-02,  4.21398319e-02, -1.36219665e-01,
  -9.26295668e-02,  6.54413179e-02, -1.83175698e-01,  1.17812030e-01,
   1.11118183e-01, -2.04834118e-01, -1.33026734e-01, -1.30475283e-01,
  -1.21068738e-01, -5.00026606e-02,  1.67913422e-01],
 [ 1.26791164e-01, -1.97589144e-01, -1.27512040e-02,  1.64869260e-02,
  -9.19258669e-02,  1.77513391e-01, -5.85732646e-02,  7.84961693e-03,
   2.04072624e-01,  2.25593939e-01, -3.03695910e-02, -4.79986444e-02,
   1.39500692e-01, -1.20757021e-01, -2.21022859e-01, -1.59979835e-01,
  -7.78847113e-02,  2.02805437e-02,  5.60702495e-02],
 [ 1.78878173e-01,  3.41049433e-02, -1.02168910e-01, -9.12862793e-02,
   5.50071374e-02, -1.59416318e-01, -6.58989772e-02,  1.11057751e-01,
   1.60070267e-02, -9.52037498e-02, -2.15513110e-01, -1.94406778e-01,
   1.61943734e-01, -1.76048234e-01, -2.91298270e-01,  5.66184558e-02,
  -1.85340151e-01, -2.81159967e-01, -3.97857249e-01],
 [-1.43382505e-01, -1.05317704e-01, -1.99887052e-01, -4.09103818e-02,
   1.23672672e-01,  1.40665621e-01, -8.26486573e-02, -2.08952710e-01,
  -2.00370356e-01, -7.29226619e-02,  5.79340756e-02,  1.95315972e-01,
  -4.44633327e-02,  4.40698713e-02,  4.36802097e-02, -1.41619816e-01,
   1.73286900e-01, -1.54507220e-01, -1.73975021e-01],
 [-1.96663871e-01, -1.22919660e-02,  2.94254255e-02, -1.14575792e-02,
  -2.20707781e-03, -2.59392381e-01, -2.73809463e-01, -1.05159871e-01,
  -1.95662692e-01, -7.14532658e-02, -2.61772841e-01, -1.20298699e-01,
  -1.74613614e-02,  1.36334926e-01, -1.78029463e-01,  1.47248775e-01,
   1.55585930e-01,  1.08057350e-01, -2.68662304e-01],
 [-6.41191527e-02,  1.41994745e-01, -1.97270513e-01, -1.11402154e-01,
   9.22342166e-02, -4.59862091e-02, -3.16734374e-01, -1.16183139e-01,
   2.67905258e-02, -8.48459899e-02, -1.63769051e-01, -8.23403224e-02,
  -1.64874196e-01,  1.27860442e-01, -4.95727989e-04, -3.25071782e-01,
  -2.18285266e-02, -2.41333589e-01, -6.20716691e-01],
 [ 1.35006830e-01,  4.16095965e-02, -5.67424484e-02,  2.67143305e-02,
   1.21478319e-01, -1.93815738e-01,  1.65477648e-01, -1.74543887e-01,
   2.02524006e-01,  2.54527688e-01, -2.25569904e-02, -2.21861769e-02,
   1.47703039e-02, -1.77204654e-01,  8.23994949e-02,  1.55670913e-02,
   6.41762093e-02, -1.77047282e-01,  4.02019359e-02],
 [ 2.81704906e-02, -6.41372278e-02,  5.86440489e-02, -1.91563055e-01,
  -2.15882644e-01,  1.32638710e-02,  9.20871794e-02, -2.78182346e-02,
   1.43521503e-01, -2.23670676e-01,  3.83758694e-02,  1.46149278e-01,
   1.68690458e-02, -1.85783073e-01,  7.64288083e-02,  1.05981439e-01,
  -1.52057648e-01, -7.99532682e-02, -1.71827883e-01],
 [-3.67483236e-02,  1.35600463e-01, -5.01353387e-03,  1.03587052e-02,
  -3.32371779e-02, -1.38319880e-01, -1.38488635e-01, -2.38741189e-01,
   4.05057818e-02,  7.71306902e-02, -6.81025907e-02,  3.61595899e-02,
  -8.24341178e-02,  1.13681378e-02, -1.02093425e-02, -5.54552115e-02,
  -2.94083059e-01, -1.34459706e-02, -3.18883896e-01],
 [-1.36754990e-01, -3.13763842e-02,  4.89522777e-02, -2.19307512e-01,
   1.83764864e-02, -7.41506964e-02,  1.59689680e-01,  5.10279834e-02,
  -6.75533488e-02, -9.98879448e-02, -2.32286125e-01,  2.35860497e-02,
   7.90700465e-02,  1.46478683e-01, -3.10832425e-03, -1.81797054e-03,
  -9.16759390e-03, -8.99027959e-02,  3.27733755e-02],
 [ 1.34494051e-01, -1.60396188e-01, -9.04025286e-02, -1.32996619e-01,
   6.09432571e-02,  1.29442438e-01, -1.38474688e-01,  1.75464720e-01,
  -1.44964889e-01, -1.88133270e-01, -7.25869536e-02,  1.54174909e-01,
  -1.63792923e-01, -5.33366576e-02, -1.68491364e-01,  6.79093003e-02,
  -3.21765877e-02, -2.17806548e-01,  5.37408143e-02],
 [ 6.45815209e-02,  5.79704754e-02,  2.08531708e-01, -1.00134388e-01,
   1.95327014e-01,  3.61095577e-01,  4.09017839e-02,  3.63051474e-01,
   3.79671842e-01,  3.89785320e-01,  1.77430421e-01, -8.82757548e-03,
   1.17394686e-01,  5.67710493e-03,  2.87023455e-01,  1.33655146e-01,
   5.03136590e-02,  3.47228825e-01,  7.22474277e-01],
 [-6.30807057e-02, -1.72821537e-01, -1.81192338e-01, -1.07014077e-02,
   1.00357406e-01,  1.19785823e-01,  1.79578453e-01,  8.70981738e-02,
  -2.24714607e-01, -2.22199529e-01,  1.53134897e-01,  1.75743178e-01,
   3.51082347e-02,  3.32439989e-02, -6.64300770e-02,  3.01318243e-02,
  -1.56989560e-01,  1.75208017e-01, -1.29435956e-01],
 [-2.17088208e-01, -7.92726204e-02, -1.68680266e-01,  6.98637292e-02,
   1.14857897e-01, -2.19658822e-01, -1.41587764e-01, -1.40309080e-01,
   9.39594731e-02, -1.40567794e-01, -5.92553914e-02,  1.17005490e-01,
  -9.34333657e-04, -2.96731628e-02, -1.08605705e-01,  6.54194355e-02,
  -5.92030995e-02,  1.06424063e-01,  1.87473866e-04],
 [-8.43007639e-02,  1.34878010e-01,  1.56005159e-01, -9.58855376e-02,
   1.36794865e-01,  2.46691525e-01,  2.35345542e-01,  1.12344891e-01,
  -1.59417659e-01, -2.98806895e-02,  1.25803631e-02,  2.56447375e-01,
   2.27174118e-01, -1.36402994e-01, -1.04657784e-02, -6.16054162e-02,
   9.44242999e-02,  5.24814948e-02,  3.79344344e-01],
 [-2.03766376e-01, -4.45586406e-02, -1.35659754e-01, -7.99008459e-02,
  -1.27681330e-01,  1.46304533e-01, -1.90793186e-01, -2.07535192e-01,
  -1.60807341e-01, -4.37639765e-02, -1.82456002e-01,  1.37794912e-01,
   8.08665752e-02,  8.97623785e-03, -1.31457642e-01, -2.02004835e-01,
  -1.96730271e-01,  2.19515190e-01,  1.86367892e-02],
 [-2.21471608e-01,  1.98464856e-01,  3.77604991e-01,  2.00585321e-01,
  -6.60319021e-03,  1.70962244e-01,  3.56491923e-01,  3.81584734e-01,
   3.22710812e-01,  1.25502735e-01,  3.40936184e-01,  1.66818753e-01,
   3.56493235e-01, -1.04101039e-02,  3.72301370e-01,  1.38824731e-01,
   3.44561011e-01,  2.78323829e-01,  7.50123143e-01],
 [ 2.75843721e-02,  4.27232422e-02, -1.09681331e-01, -1.96293503e-01,
  -2.82247454e-01,  6.26862515e-03, -1.14156753e-01,  4.35897633e-02,
  -2.12061718e-01, -2.10793301e-01,  3.69799696e-02, -2.57048368e-01,
  -8.51176828e-02, -1.46511689e-01,  1.40680403e-01, -1.38282821e-01,
  -1.72072336e-01,  5.63525856e-02, -5.81578851e-01],
 [ 5.59916645e-02,  1.99888468e-01,  9.81684308e-03,  5.47873452e-02,
  -7.78279975e-02,  2.78406948e-01, -3.66000757e-02,  3.57231170e-01,
   5.38719445e-02,  7.56746009e-02,  3.31326455e-01,  2.07438022e-01,
  -7.88733661e-02,  2.24780783e-01,  3.06258410e-01,  3.39534692e-02,
   2.90477008e-01,  1.45782247e-01,  6.33385420e-01],
 [ 1.45799622e-01, -1.21505968e-01,  9.77544188e-02, -9.00712460e-02,
  -4.64972593e-02,  3.92725728e-02, -2.39344046e-01, -3.50099243e-02,
  -7.81137869e-02, -1.12671100e-01, -1.09617606e-01, -6.92932606e-02,
   5.95387295e-02,  1.19376883e-01,  4.08572890e-02, -1.08585544e-02,
   1.75246611e-01,  1.09225456e-02,  4.17428724e-02],
 [ 2.05557272e-01, -1.87249184e-01, -2.25454599e-01,  1.22804381e-01,
   6.34725839e-02, -3.42530496e-02,  1.92747995e-01, -1.46440342e-01,
   1.94565337e-02, -1.69832725e-02, -2.26931825e-01, -6.31272271e-02,
  -1.66992322e-02, -3.55084799e-02, -1.44090444e-01, -1.76433101e-01,
   6.51600361e-02,  4.11372110e-02,  1.88172296e-01],
 [ 1.10382348e-01, -8.24212506e-02, -1.98962674e-01, -1.27252340e-01,
   2.25906953e-01,  1.88686043e-01, -1.53470546e-01,  1.03746019e-01,
  -1.21280447e-01, -1.10902540e-01,  2.59785466e-02,  1.34107843e-01,
  -1.46368995e-01, -1.10682547e-01,  5.71122542e-02,  1.35541007e-01,
   3.33222970e-02,  1.07311904e-02,  3.44794393e-02],
 [-1.74134634e-02,  1.43435732e-01, -3.45697924e-02,  5.13665304e-02,
   1.13106638e-01, -2.37776384e-01, -1.92041084e-01, -2.61498034e-01,
  -2.54017115e-01, -1.09934986e-01, -1.59525588e-01, -1.25652343e-01,
  -1.56094119e-01,  8.96906201e-03, -2.07302749e-01,  5.39932540e-03,
  -5.37757166e-02, -3.51135172e-02, -5.90317786e-01],
 [ 1.18516751e-01,  9.81492773e-02,  3.37386876e-01,  1.49178207e-01,
   2.56691515e-01,  5.97144477e-02, -7.48179406e-02, -4.64839712e-02,
   8.01116526e-02,  1.87819496e-01,  3.28034073e-01,  2.85304010e-01,
   2.50892818e-01,  3.12506199e-01,  2.91538596e-01, -1.95340160e-03,
  -2.02356745e-02,  2.03683689e-01,  5.18199861e-01],
 [-2.30631784e-01,  1.32522911e-01,  1.84960946e-01, -4.13271785e-02,
   2.00304523e-01, -5.24053648e-02, -9.00871307e-03,  2.25511536e-01,
   7.61374831e-02,  2.77079552e-01, -3.59606445e-02,  2.52213836e-01,
   1.06866553e-01, -1.45154312e-01, -1.38982164e-03, -1.68946281e-01,
  -1.53392836e-01,  2.27475241e-02,  5.00170469e-01],
 [-1.18138693e-01, -6.63466975e-02,  5.08400649e-02,  1.83250025e-01,
   1.71665967e-01, -1.94433406e-01, -2.12698668e-01, -2.58364230e-01,
  -5.59249986e-03, -5.69236465e-02, -1.71431333e-01,  2.42186375e-02,
  -2.18960226e-01, -4.60952297e-02,  3.71417776e-02, -6.93291575e-02,
  -7.66442344e-02,  4.76441048e-02,  2.07706541e-01],
 [ 1.57621652e-02, -1.81447551e-01,  2.23025978e-01,  2.47461617e-01,
  -9.16556641e-02, -1.63693745e-02,  1.63770139e-01, -1.93052784e-01,
  -2.60811001e-01, -3.58858295e-02,  9.40969214e-02, -5.89628220e-02,
   5.41172363e-02, -2.09320158e-01,  1.45357013e-01,  8.08304101e-02,
   1.69800758e-01, -1.01020217e-01,  2.43619904e-01],
 [-2.47709788e-02, -4.18614224e-03,  2.48765543e-01,  2.21183881e-01,
   4.58393514e-01,  3.64821255e-01,  3.89760941e-01,  3.97471994e-01,
   4.44706619e-01,  2.43443534e-01,  3.48949671e-01,  4.34755445e-01,
   1.63868487e-01,  5.17620780e-02,  1.10556290e-01,  1.37070492e-01,
   2.47448727e-01,  1.38460577e-01,  7.40914822e-01],
 [-1.47280261e-01, -1.72712713e-01,  3.04487105e-02,  4.60127071e-02,
  -1.73127487e-01,  2.48510502e-02,  3.09167244e-02, -2.55946280e-03,
   9.32740346e-02, -8.50593448e-02,  1.55041665e-01, -1.01816885e-01,
   4.73576225e-02, -8.64072964e-02, -6.73556849e-02,  4.31889221e-02,
   2.92880125e-02, -1.94572061e-01, -4.50310856e-02],
 [-1.56946406e-01,  4.66936342e-02, -1.32236421e-01, -1.32755786e-01,
   1.01423390e-01, -7.41181448e-02, -2.33585507e-01, -3.03429514e-01,
  -2.93607175e-01, -1.57171473e-01,  1.48580164e-01, -4.90579940e-02,
  -2.88565814e-01,  8.59272704e-02, -1.51039407e-01, -1.22031614e-01,
  -1.59769766e-02, -2.07541183e-01, -2.99747944e-01],
 [ 1.01826183e-01, -5.00191487e-02, -2.07059845e-01,  5.10401241e-02,
  -8.36724192e-02,  3.39997187e-02, -2.08865851e-02, -1.59061253e-01,
  -1.97862744e-01, -9.30834413e-02,  1.17517076e-01,  1.45496354e-01,
  -1.63407236e-01, -1.22207694e-01,  7.06529021e-02,  2.73855161e-02,
  -2.08004221e-01,  2.25725979e-01,  4.36250195e-02],
 [-5.30763878e-04, -2.18586307e-02,  4.02603090e-01,  1.64921135e-01,
   3.83603960e-01,  4.43591297e-01,  6.21509612e-01,  2.55935550e-01,
   4.46775645e-01,  4.83692467e-01,  3.98855835e-01,  4.15189356e-01,
   3.67215484e-01,  4.44700748e-01,  4.51425821e-01,  4.67197508e-01,
   4.78260100e-01,  2.60859251e-01,  8.93327177e-01],
 [ 2.20800072e-01,  9.46346521e-02,  3.97100020e-03,  1.64217837e-02,
  -2.59933203e-01, -2.09502559e-02, -1.40079170e-01, -2.09707081e-01,
   4.62526567e-02, -2.90512145e-01,  2.37449612e-02, -2.84601539e-01,
  -8.13732520e-02,  6.29169960e-03, -9.45310369e-02, -2.17628390e-01,
  -1.30442068e-01, -1.40421212e-01, -5.04840970e-01],
 [ 1.06145434e-01, -2.81320196e-02, -2.02447966e-01, -1.17241703e-01,
  -2.22086664e-02, -1.08508646e-01,  1.39894895e-02,  2.20140874e-01,
  -1.41557321e-01,  1.25975654e-01, -9.50703099e-02, -6.75204322e-02,
   1.86865970e-01,  6.87825354e-03, -1.78672120e-01, -1.72829881e-01,
  -5.96498661e-02, -1.70745760e-01, -2.11119011e-01],
 [-3.22610661e-02, -1.41563579e-01,  2.17381623e-02,  1.78738385e-01,
   2.22263881e-03, -1.38544692e-02,  2.27134839e-01,  7.89963733e-03,
   1.48542479e-01, -1.66634709e-01,  8.44799131e-02,  9.09664780e-02,
   2.17838302e-01,  1.72663927e-01,  1.79040641e-01, -1.40912279e-01,
   9.48944613e-02,  2.87009235e-02,  2.03741431e-01],
 [ 3.99466492e-02, -3.99945080e-02, -2.26478860e-01, -1.26520693e-01,
  -8.59974548e-02,  1.46240458e-01, -1.26822203e-01,  9.27210748e-02,
   1.25686914e-01,  6.90720752e-02,  1.47498315e-02,  1.78334012e-03,
   1.63418248e-01,  2.15248123e-01, -8.02260712e-02, -1.71189621e-01,
  -1.69290766e-01,  7.58304298e-02,  1.31731674e-01],
 [ 1.63463980e-01, -6.24728575e-02, -8.61976966e-02,  7.44200200e-02,
  -1.49824858e-01,  1.80245116e-01, -1.55936360e-01, -2.96538547e-02,
   1.02279812e-01, -1.66487277e-01, -1.93494290e-01, -1.72963310e-02,
   2.10811213e-01, -1.43044338e-01, -1.84663191e-01,  7.65728056e-02,
  -2.04278335e-01, -6.62646145e-02, -2.63859015e-02],
 [ 1.33444546e-02,  7.80522898e-02,  3.23739916e-01,  1.88636705e-01,
   3.17503065e-01,  1.39154285e-01,  2.80426621e-01, -1.95457805e-02,
   3.13294351e-01,  1.38994912e-02,  1.42699838e-01, -3.57148089e-02,
  -8.64782277e-03,  2.96949029e-01,  1.37346506e-01, -2.76578143e-02,
   2.85926044e-01,  3.63407284e-01,  3.21073562e-01],
 [ 1.73781455e-01,  2.33258046e-02,  6.92463219e-02,  2.57571548e-01,
   3.96233827e-01,  2.06329927e-01,  2.03100353e-01,  1.98592216e-01,
   2.45315164e-01,  3.19958985e-01,  3.32999498e-01,  1.01923071e-01,
   8.25815648e-02,  3.29711348e-01,  2.98682988e-01,  1.94214344e-01,
   3.63238692e-01,  3.24088596e-02,  7.80412257e-01],
 [ 1.76173627e-01,  8.89597461e-02,  1.54681712e-01,  6.68145120e-02,
  -2.14342400e-01, -1.54221043e-01, -3.75094563e-02,  8.78047422e-02,
  -1.06059887e-01, -6.09709062e-02,  1.22553624e-01, -1.25847444e-01,
  -1.35185242e-01, -9.47933272e-02,  6.25199154e-02, -2.48214006e-01,
  -2.14888416e-02,  9.88750085e-02, -3.80995482e-01],
 [ 1.98401526e-01, -7.26744905e-03,  5.91381490e-01, -1.92326773e-02,
   7.81772554e-01,  7.29306459e-01,  7.22129881e-01,  6.12133563e-01,
   7.66383767e-01,  6.54698372e-01,  5.38955986e-01,  6.92355931e-01,
   7.79540896e-01,  6.37086093e-01,  7.35175252e-01,  6.74542248e-01,
   7.33370602e-01,  6.03171825e-01,  9.45296407e-01]]
couche_1._bias = [-0.03347323,  0.583886  ,  0.2019849 ,  0.34686154, -0.05678206,
  0.05930443,  0.32884252, -0.2970532 , -0.15997082, -0.10820048,
 -0.3146914 , -0.15472443,  0.23645155,  0.83722126, -0.08863166,
 -0.23352586,  0.17243746,  0.25288838,  0.0476042 ,  0.43221396,
  0.33065748, -0.20787847,  0.56161505, -0.15143527,  0.08741063,
 -0.18934768,  0.20521194,  0.04402243, -0.18174087,  0.16668674,
 -0.14192203, -0.05442235, -0.23639828, -0.20663291,  0.25330257,
  0.09927364,  0.09023644, -0.14825882,  0.03616285,  0.2598909 ,
 -0.2900501 , -0.01724698,  0.1848621 ,  0.18768777,  0.21510509,
 -0.14568216,  0.2450479 ,  0.20866284, -0.10618698, -0.16087228,
  0.27778083,  0.2156837 , -0.12449604, -0.0906755 ,  0.6504719 ,
 -0.06182347,  0.20997258, -0.04668529, -0.09373535,  0.2268165 ,
  0.33950946,  0.28960404,  0.07820767,  0.7691999 ]
sortie._parameters =  [[-7.51001537e-02,  1.67813540e-01,  1.10951513e-01,  8.10068324e-02,
  -6.41024113e-01,  1.22568935e-01,  3.80346507e-01, -8.82650316e-02,
   4.59771901e-02, -1.21122539e-01, -7.70038068e-02,  7.27383494e-02,
  -7.07361568e-03,  4.71852869e-01, -8.57900232e-02, -5.76147884e-02,
   6.85517490e-02,  9.28457305e-02,  5.75020909e-04,  6.28662556e-02,
   4.99623939e-02,  1.12748578e-01,  3.19407016e-01,  5.49598336e-02,
  -1.18198112e-01, -5.55270799e-02, -2.02441663e-02, -8.99002235e-03,
  -7.94911981e-02, -7.67133478e-03, -2.57597715e-02, -8.06658119e-02,
   2.87558418e-03, -1.23671845e-01,  7.43512213e-02, -8.99593681e-02,
  -3.87932360e-02,  1.16740558e-02, -8.30627829e-02,  4.19365130e-02,
  -1.06669284e-01,  1.39725164e-01, -4.36781198e-02,  4.70096767e-02,
   5.81097752e-02, -6.97550327e-02,  1.72115803e-01,  1.27028497e-02,
  -7.95863122e-02, -4.86146867e-01,  2.23952249e-01,  2.42524594e-02,
  -1.11867331e-01, -3.80095541e-02,  3.64527524e-01, -6.06016517e-02,
   2.28978544e-02,  3.95116359e-02, -1.10474244e-01,  1.21083364e-01,
   1.54173315e-01,  4.54817675e-02, -2.58508250e-02,  5.20026505e-01]]
sortie._bias = [0.21796049]



couche_1._parameters = np.array(couche_1._parameters)
couche_1._parameters = couche_1._parameters.T
# couche_2._parameters = np.array(couche_2._parameters)
# couche_2._parameters = couche_2._parameters.T
sortie._parameters = np.array(sortie._parameters)
sortie._parameters = sortie._parameters.T

reseau_mpr = Sequentiel(couche_1,ReLU(),
                        # couche_2,ReLU(),
                        sortie,ReLU())

env = MPR_envnn(custom=False,nb_cp = 4,nb_round = 3)
model = reseau_mpr


start_time = time.time()
max_steps = 5000
stateM = env.reset()
i = 0
terminated = False

while (not terminated) and (i < max_steps):
    # Convertir l'état en array numpy
    state_array = np.array(stateM, dtype=np.float32)

    # Tester toutes les actions (one-hot encoding)
    actions = np.eye(env.nb_action, dtype=np.float32)  # Matrice identité pour one-hot

    # Calculer les Q-values pour chaque action
    # Supposons que self.model prend (état, action) et retourne une Q-value
    # On empile les états pour chaque action
    states = np.repeat(state_array[np.newaxis, :], ACTION_DIM, axis=0)
    q_values = model.forward(np.concatenate([states, actions], axis=1)) 
    # print(q_values)
    # exit()

    action = np.argmax(q_values)
    print(action)
    next_stateM, reward, terminated = env.step(action)
    stateM = next_stateM
    i += 1


end_time = time.time()
print(f"Temps d'exécution : {end_time - start_time:.4f} secondes")
env.show_traj()

